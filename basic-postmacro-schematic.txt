- Value of last expression is returned.


Basic functions:
        quote -- turns elements of the code structure into internal data
        +-*/%<><=>= -- all the math things
        cons, car, cdr
        caddadr and friends
        and, or -- evaluate combinations of truthy or falsey values
        if
        do
        define
        vector
        func

Todo in lexparse: Recognize bools, vectors, strings? Not urgent.


Evaluating the above commands: How does the VM work?
        func turns tree into a new block of bytecode
        Closures have environment pointers.

Basic structure:
        Calling a function creates a new environment frame
        This frame holds arguments, new definitions, and
        the return value--either a value or a function call.
        
This is the first iteration of bytecode, where functions and vars are
held in a symbol table. The next pass consolidates them.
CALL:function_id:env_id:return_loc:arg1:arg2;
becomes
CALL:pc_address:env_address:return_loc:arg1:arg2;
A function is passed as a tuple of a function id and an env id. The function
id is the id of a pointer to the function's location in the instruction list, and the 
env id is the id of a pointer to the environment's location in the data list.
There's also one for calling builtins, which has a unique id instead of pc_address.

The first thing the program does is say, "I want to get the return value from this function at this
address." The program has the instruction location of the function, the memory location of its env (null),
the location to write the return value to, and its arguments. The first thing it does is create a
new env. The return location and the arguments are stored here, as well as anything that is defined here.
Next, it goes through its contents. Either definitions or expressions. Definitions are evaluated and
stored in the env. Expressions are evaluated and stored to the return location. When the function
finishes, it stops.

Garbage collection is done by reference counting, since it means less work on the part of the runtime.
Each memory allocation is preceded by a reference number, which is incremented every time a pointer to it
is allocated, and decremented every time a pointer to it goes out of scope. The runtime maintains a link-list
of allocated memory, and every time memory is allocated, the link-list is searched for an open space
large enough for the new thing. When the link-list is queried, every entry has its reference number checked
in order to check to see if the number of references is zero. If it is, that link is removed from the list.

Formal definitions of functions:
        quote2: Takes one argument--returns the id of the symbol it's given, if it's given a symbol. Otherwise,
                returns the thing it's given. Not to be confused with the quote macro, which is recursuve quoting
                inside a proper lsit if applied to an instruction list and which is quote2 otherwise.
        math: take two numbers and returns a number
        cons: Evaluates arguments and returns a reference to an allocated cons structure holding references
                to the results of the arguments.
        car, cdr: returns a ref to an arg of a cons given a ref to a cons.
        empty: a ref to zero
        if: takes three values. If the first one evaluates to something truthy, evaluates the second one and
                returns it. Otherwise, does that to the third.
        define2: Sets a new var in the stack frame to be a pointer to something. Regular define is macro'd to 
                (define2 (do ...)), and do is ((func empty ...)). Let is similar.
        vector: Allocates an amount of memory and fills it with things given here. Returns a reference to that.
        func: At compile time, code in here is processed and saved to a new block of code that is later appended
                to this code, after this one returns. Func becomes an instruction with a pc pointer to that func
                code. When the instruction the func statement turns into is evaluated, it becomes a special
                func struture with a pc pointer and an env pointer that points to the env in which it was
                created. When a ref to that structure is used as a function, it takes an ll of arguments and
                creates a new env to run in and jumps the pc, storing the old pc in the env to return to.
        cons?, empty?, vector?, int?, float?, char?, symbol?: Return bool by type.

        All the above are builtin funcs written straight in assembly. There are a few builtin funcs
        that the user can't execute, like decrementRef, which recursively decrements refs and deallocates memory.
        I don't have any others yet.

Executing a function:
        1. Requires: Either the symbol of a builtin or a symbol pointing to a func struct, a freshly allocated
                env, and the arguments punched into that env. The env is large enough for the args + every 
                variable "defined" in the top structure of the block + the value of the pc + somewhere to 
                write the return value.
        2. Args are evaluted. Store the pc in the new env and jump into the func. Execute the func, and when
                done, write the return value in the appropriate spot and jump back.

A reference number is incremented when a pointer value is defined (set?) to point at the thing.
A reference number is decremented (by the runtime) when an env, list, or vector containing a pointer 
        to the thing is removed from the reference list, or (by the code) when it is an env and its function
        returns.
This then means that the reference list must, upon popping a node, go into the memory array and scan the memory
        area for pointers, and decrement those locations.

This leads to a convenient rule: Structures containing pointers can only contain pointers.
If we take this rule, it might be easier just to do tracing.
If we do, it goes like this:
        When program wants to allocate, it calls "NEW 7" for a new memory slot 7 long.
        The runtime has a list of used memory zones, and it'll find a gap long enough and assign it.
        If it can't, it'll trace through the memory from the top env to find used memory, and make a new list.
        Then, if it still can't find memory, it'll elongate the memory space or crash.
Versus:
        When program wants to allocate, it calls "NEW 7" for a new memory slot 7 long.
        The compiler has a list of used memory zones, and it'll find a gap long enough and assign it.
        If the list is ever finished without having found memory, the runtime will elongate that or crash.
        When the program calls "DUMP 0x123", the list deallocates the memory block starting at 0x123.
        On my end, when a function returns, it must have its env's reference count diminished. When that reaches
        zero, it'll be deleted, and have its own pointers' referene counts diminished, and in turn they'll be
        checked.

Assembly commands:
        NEW PTR INT -- writes a pointer to INT newly-allocated blocks of memory into PTR
        DUMP PTR -- deallocates the block at PTR
        ADD PTR INT1 INT2 -- writes the sum of the two INTs to PTR
        SUB, MUL, DIV, MOD -- same

        Notation: M is memory cell with the index m. [M] is the memory cell with the
        index of the contents of memory cell M.

        SET PTR INT -- sets cell PTR to INT
        SETI PTR OFF INT -- sets cell [PTR]+OFF to INT (set indirectly)
        SETD PTR1 PTR2 OFF -- sets cell PTR1 to [PTR2]+OFF (set to dereferenced)
        SETID PTR1 OFF PTR2 -- sets cell [PTR1]+OFF to [PTR2]
        DEREF PTR1 PTR2 -- sets cell PTR1 to [[PTR2]]
        NB: for a while i was using SETD a b 0, SETD a a 0 instead of
                going SETD a b 0, DEREF a a 0 (or better yet, DEREF a b 0).
                Watch out for that, maybe swap up some of the setd a b, deref a a for deref a b

        COND PTR LABEL -- if PTR is 0, jump to label
        JUMP LABEL -- move pc to label
        LABEL INT -- label this place
        CALL LABEL PTR -- calls the func at label with env at PTR
        NEWP, SETP PTRPTR INT ... -- sets or news at the location described at the
                location PTRPTR
        
Symbol tables are passed by copy.


I'm going to revise my SET commands.
        SET is becoming SET-LITERAL
        SETD is becoming COPY-ADD
        SETI is becoming SET-INDEXED
        SETID is becoming COPY-INDEXED
        DEREF stays

SO:
        SET-LITERAL R A sets the cell R to A
        COPY-ADD R A N sets the cell R to [A]+N
        SET-INDEXED R I A sets the cell [R]+I to A
        COPY-INDEXED R I A sets the cell [R]+I to [A]
        DEREF A B I sets the cell A to [[B]+I]


function rules: What is the basic structure of an assembly function?
        When a function is called, it can assume it has an environment, and r2 points to
        it. r1 is the parent environment and r0 is the return location. Builtin functions
        are handled by sticking them in the initial symbol table. The special function dumpfunc
        doesn't need to work that way. It isn't called conventionally.  

        The actual assembly of a function can start assuming r0 and r1 are normal, and r2 is its own
        env.

_J_80lBEa
